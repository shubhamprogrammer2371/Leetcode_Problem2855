int minimumRightShifts(int* nums, int numsSize){
    int order_shift = 0 , order_shift_index = -1;
    for( int i = 1 ; i < numsSize ; i++)
    {
        if(nums[i] > nums[i-1])
            continue;
        else if(!order_shift)
        {
            order_shift = 1;
            order_shift_index = i;
        }
        else
            return -1;
    }
    return ((order_shift) ? ((nums[0] < nums[numsSize - 1]) ? -1 : numsSize - order_shift_index) : 0);
}


--------------------------------------------------------------------------------------------------------------------------------------------------------------------


int minimumRightShifts(const int * const nums, const int numsLen){
	int peak = -1;
	for (int i = 0 ; i < numsLen - 1; i++)
    {
		if (nums[i] > nums[i + 1])
        {
			if (peak == -1)
				peak = i;
			else
				return -1;
		}
	}
    return (peak == -1) ? 0 : ((nums[0] > nums[numsLen - 1]) ? (numsLen - 1) - peak : -1);
}


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------


int comp(const void *a, const void *b) 
{
    return *(int*)a - *(int*)b;
}

int minimumRightShifts(int *nums, int numsSize)
{
    int i , breakpoints = 0; // reject invalid arrays first
    for ( i = 0 ; i < numsSize - 1 ; i++) 
        if (nums[i+1] < nums[i]) 
            if ((++breakpoints) > 1) 
                return -1;
    if ((numsSize > 1) && (nums[numsSize-1] > nums[0]) && (breakpoints))
        return -1;
    int *ogArray = calloc(numsSize, sizeof(int)) , *idx = calloc(101, sizeof(int));
    memcpy(ogArray, nums, numsSize*sizeof(int));
    qsort(nums, numsSize, sizeof(int), comp);
    for ( i = 0 ; i < numsSize ; i++) 
        idx[nums[i]] = i;
    int ans = 0;
    for ( i = 0 ; i < numsSize ; i++) 
        ans = fmax(ans, fmin((idx[ogArray[i]] - i), numsSize - i));
    return ans;
}
